Important points on building CORBA based distributed object application
=======================================================================

Developing the IDL - Interface Definition Language?
---------------------------------------------------

- Initially, need to develop an IDL - Interface Definition Language where idlj compiler uses the IDL-to-java language mapping to convert IDL definitions to stubs at client side and skeleton code at the server side.
- Using this auto-generated Java interfaces, classes and methods, implementation of client and server code can be achieved.
- In IDL, if the operation is oneway, they cannot return results and raise exceptions.

IDL Sample Code
---------------------------------------------------
::

	module GreetingsApp
	{
    		interface Greetings
    		{
        		string expressGreetings();
        		oneway void shutdown();
    		};
	};


Mapping the file_name.idll to java
--------------------------------------------------
- The idlj compiler will generate the client side stubs by default but not the server side skeletoon. In order to generate, both use arguments -fall or -fserver to get in-line with the Portable Object Adapter(POA)
- Example: "idlj -fall Greetings.idl"
- Make sure the orbd and idlj which are in bin directory of jdk are included in Path Environment variables for Windows
- idltojava is the previous version of idlj compiler
- The auto-generated files provides a standard functionality, hence can be avoided until deploying and running the program

POA Advantages
--------------------------------------------------
- Construction of remote object implementations that are portable between different ORB products
- Transparent activation of objects
- Support objects with persistent identities
- Enable single servent support multiple object identities

Auto-generated files functionalities
--------------------------------------------------
- Greetings.java : This is interface which is java version of IDL interface. It extends the CORBA functionality providing standard CORBA object functionality
:: 
	package GreetingsApp;

	/**
	* GreetingsApp/Greetings.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	public interface Greetings extends GreetingsOperations, org.omg.CORBA.Object, org.omg.CORBA.portable.IDLEntity 
	{
	} // interface Greetings

	
- GreetingsOperations.java : This class is used by the server side mapping to provide optimized calls for co-located clients and servers
::

	package GreetingsApp;

	/**
	* GreetingsApp/GreetingsOperations.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	public interface GreetingsOperations 
	{
		String expressGreetings ();
		void shutdown ();
	} // interface GreetingsOperations

- GreetingsPOA.java : This is public abstract class which basically tells ORB what information it needs in dispatching to the server objects and is analog to client stub
::

	package GreetingsApp;

	/**
	* GreetingsApp/GreetingsPOA.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	public abstract class GreetingsPOA extends org.omg.PortableServer.Servant
 	implements GreetingsApp.GreetingsOperations, org.omg.CORBA.portable.InvokeHandler
	{

  		// Constructors

  		private static java.util.Hashtable _methods = new java.util.Hashtable ();
  		static
  		{
   			_methods.put ("expressGreetings", new java.lang.Integer (0));
    			_methods.put ("shutdown", new java.lang.Integer (1));
  		}

  		public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  		{
    			org.omg.CORBA.portable.OutputStream out = null;
    			java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    			if (__method == null)
      			throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    			switch (__method.intValue ())
    			{
       			case 0:  // GreetingsApp/Greetings/expressGreetings
       			{
         			String $result = null;
         			$result = this.expressGreetings ();
         			out = $rh.createReply();
         			out.write_string ($result);
         			break;
       			}

       			case 1:  // GreetingsApp/Greetings/shutdown
       			{
         			this.shutdown ();
         			out = $rh.createReply();
         			break;
       			}

       			default:
         			throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    		}

    		return out;
  	} // _invoke

  	// Type-specific CORBA::Object operations
  	private static String[] __ids = {
    	"IDL:GreetingsApp/Greetings:1.0"};

  	public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  	{
    		return (String[])__ids.clone ();
  	}

  	public Greetings _this() 
  	{
    		return GreetingsHelper.narrow(
    		super._this_object());
  	}

  	public Greetings _this(org.omg.CORBA.ORB orb) 
  	{
    		return GreetingsHelper.narrow(
    		super._this_object(orb));
  	}

} // class GreetingsPOA

- _GreetingsStub.java : Used by client ORB during object invocation. The client's object reference to server directs to the client stub
::

	package GreetingsApp;

	/**
	* GreetingsApp/_GreetingsStub.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	public class _GreetingsStub extends org.omg.CORBA.portable.ObjectImpl implements GreetingsApp.Greetings
	{

  		public String expressGreetings ()
  		{
            		org.omg.CORBA.portable.InputStream $in = null;
            		try {
                		org.omg.CORBA.portable.OutputStream $out = _request ("expressGreetings", true);
                		$in = _invoke ($out);
                		String $result = $in.read_string ();
                		return $result;
            		} catch (org.omg.CORBA.portable.ApplicationException $ex) {
                		$in = $ex.getInputStream ();
                		String _id = $ex.getId ();
                		throw new org.omg.CORBA.MARSHAL (_id);
            		} catch (org.omg.CORBA.portable.RemarshalException $rm) {
                		return expressGreetings (        );
            		} finally {
                		_releaseReply ($in);
            		}
  		} // expressGreetings

  		public void shutdown ()
  		{
            		org.omg.CORBA.portable.InputStream $in = null;
            		try {
                	org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", false);
                	$in = _invoke ($out);
                	return;
            		} catch (org.omg.CORBA.portable.ApplicationException $ex) {
                		$in = $ex.getInputStream ();
                		String _id = $ex.getId ();
                		throw new org.omg.CORBA.MARSHAL (_id);
            		} catch (org.omg.CORBA.portable.RemarshalException $rm) {
                		shutdown (        );
            		} finally {
                		_releaseReply ($in);
            		}
  		} // shutdown

  		// Type-specific CORBA::Object operations
  		private static String[] __ids = {
    		"IDL:GreetingsApp/Greetings:1.0"};

  		public String[] _ids ()
  		{
    			return (String[])__ids.clone ();
  		}

  		private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  		{
     			String str = s.readUTF ();
     			String[] args = null;
     			java.util.Properties props = null;
     			org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   		try {
     			org.omg.CORBA.Object obj = orb.string_to_object (str);
     			org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     			_set_delegate (delegate);
   		} finally {
     			orb.destroy() ;
   		}
  	}

  		private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  		{
     			String[] args = null;
     			java.util.Properties props = null;
     			org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   		try {
     			String str = orb.object_to_string (this);
     			s.writeUTF (str);
   		} finally {
     			orb.destroy() ;
   		}
  	}
} // class _GreetingsStub

- GreetingsHelper.java : This class provide adjunct functionality for casting the CORBA object references of particular types. Also, does reading and writing the data types to CORBA streams
::

	package GreetingsApp;


	/**
	* GreetingsApp/GreetingsHelper.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	abstract public class GreetingsHelper
	{
  		private static String  _id = "IDL:GreetingsApp/Greetings:1.0";

  		public static void insert (org.omg.CORBA.Any a, GreetingsApp.Greetings that)
  		{
    			org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    			a.type (type ());
    			write (out, that);
    			a.read_value (out.create_input_stream (), type ());
  		}

  		public static GreetingsApp.Greetings extract (org.omg.CORBA.Any a)
  		{
    			return read (a.create_input_stream ());
  		}

  		private static org.omg.CORBA.TypeCode __typeCode = null;
  		synchronized public static org.omg.CORBA.TypeCode type ()
  		{
    			if (__typeCode == null)
    			{
      				__typeCode = org.omg.CORBA.ORB.init ().create_interface_tc (GreetingsApp.GreetingsHelper.id (), "Greetings");
    			}
    			return __typeCode;
  		}

  		public static String id ()
  		{
    			return _id;
  		}

  		public static GreetingsApp.Greetings read (org.omg.CORBA.portable.InputStream istream)
  		{
    			return narrow (istream.read_Object (_GreetingsStub.class));
  		}

  		public static void write (org.omg.CORBA.portable.OutputStream ostream, GreetingsApp.Greetings value)
  		{
    			ostream.write_Object ((org.omg.CORBA.Object) value);
  		}

  		public static GreetingsApp.Greetings narrow (org.omg.CORBA.Object obj)
  		{
    			if (obj == null)
      				return null;
    			else if (obj instanceof GreetingsApp.Greetings)
      				return (GreetingsApp.Greetings)obj;
    			else if (!obj._is_a (id ()))
      				throw new org.omg.CORBA.BAD_PARAM ();
    			else
    			{
      				org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      				GreetingsApp._GreetingsStub stub = new GreetingsApp._GreetingsStub ();
      				stub._set_delegate(delegate);
      				return stub;
    			}
  		}

  		public static GreetingsApp.Greetings unchecked_narrow (org.omg.CORBA.Object obj)
  		{
    			if (obj == null)
      				return null;
    			else if (obj instanceof GreetingsApp.Greetings)
      				return (GreetingsApp.Greetings)obj;
    			else
    			{
      				org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      				GreetingsApp._GreetingsStub stub = new GreetingsApp._GreetingsStub ();
      				stub._set_delegate(delegate);
      				return stub;
    			}
  		}

	}


- GreetingsHolder.java : Public instance of type Greetings. Also, delegates to methods in Helper class for reading and writing
::

	package GreetingsApp;

	/**
	* GreetingsApp/GreetingsHolder.java .
	* Generated by the IDL-to-Java compiler (portable), version "3.2"
	* from Greetings.idl
	* Monday, December 2, 2013 4:15:42 AM CST
	*/

	public final class GreetingsHolder implements org.omg.CORBA.portable.Streamable
	{
  		public GreetingsApp.Greetings value = null;

  		public GreetingsHolder ()
  		{
  		}

  		public GreetingsHolder (GreetingsApp.Greetings initialValue)
  		{
    			value = initialValue;
  		}

  		public void _read (org.omg.CORBA.portable.InputStream i)
  		{
    			value = GreetingsApp.GreetingsHelper.read (i);
  		}

  		public void _write (org.omg.CORBA.portable.OutputStream o)
  		{
    			GreetingsApp.GreetingsHelper.write (o, value);
  		}

  		public org.omg.CORBA.TypeCode _type ()
  		{
    			return GreetingsApp.GreetingsHelper.type ();
  		}

	}


Developing the Server Side
--------------------------------------------------
- Server's main() method does the following:
	- Produces and initializes ORB instance
	- Reference to root Project Object Adapter and activates POAManager
	- Informs ORB about the servant clas instance created
	- Root naming context
	- New object registration in naming context with name "Greetings"
	- Client new object invocation waiting.

- Two options for the Naming Service are :
	- orbd: Includes both the transient Naming Service and a Persistent Naming Service with the Server Manager
	- tnameserv: Transient Naming Service

- CORBA do supports server-side mappings for implementing an IDL interface of two different types:
	- Inheritance Model : Using an implementation class that extends the compiler generated skeleton, the IDL interface is implemented
	- The Delegation Model : The IDL interface is implemented using two classes IDL - genereated Tie class and the class that implements the IDL generated operations, depicting the functions.

- CORBA basically uses the static invocation
::

	import GreetingsApp.*; 	// Package containing the stubs
	import java.util.Properties;			// Initiating the properties by ORB
	import org.omg.PortableServer.POA;		// Portable Server Inheritance Model required for classes
	import org.omg.PortableServer.*;
	import org.omg.CORBA.*;			// All CORBA applications need to import this package
	import org.omg.CosNaming.*; 	// GreetingsServer will make use of the NamingService
	import org.omg.CosNaming.NamingContextPackage.*;  	// Package includes exceptions thrown by the service name

	class GreetingsImpl extends GreetingsPOA {
		private ORB orb;
	
		// Setting the orb value with the servent. orb value is used to invoke shutdown method
		public void setTheORB(ORB orbValue) {
			orb = orbValue;
		}

		//Implementing the expressGreetings() method below
		public String expressGreetings() {
			return "\nChristmas Greetings !!!\n";
		}

		//Implementing the shutdown() method below
		public void shutdown() {
			orb.shutdown(false);
		}
	}
	public class GreetingsServer {
		public static void main(String args[]) {
			// Try block below to handle the CORBA system exceptions at run-time
			// Exceptions occur during marshalling, un-marshalling and upcall
			try {
				// Initializing the server local ORB object
				ORB orb = ORB.init(args, null);		// Server command line arguments are passed

				// Referencing to root project object adapter 
				POA root_poa = POAHelper.narrow(orb.resolve_initial_references("TheRootPOA"));

				// Activating POAManager
				root_poa.the_POAManager().activate();
			
				// Creating servent object and registering with ORB
				GreetingsImpl greetingsImpl = new GreetingsImpl();
				greetingsImpl.setTheORB(orb);
						
				// Getting references of object form the servant
				org.omg.CORBA.Object ref = root_poa.servant_to_reference(greetingsImpl);
			
				Greetings greetings_ref = GreetingsHelper.narrow(ref);

				// Getting the  root naming context i.e the object reference for the Servent
				org.omg.CORBA.Object objectReference = orb.resolve_initial_references("NameService");

				// Using NamingContext which is the part of the inter-operable Naming Service (INS) specification
				NamingContextExt namingContextReference = NamingContextExtHelper.narrow(objectReference);

				// Binding the object reference in naming
				String gname = "Greetings";
				NameComponent requiredPath[] = namingContextReference.to_name(gname);
				namingContextReference.rebind(requiredPath, greetings_ref);  	// Binding the servent object with the "Greetings" id

				System.out.println("GreetingsServer ready and waiting for the client object operation invocation...");

				//Waiting for the server object method invocations from the client
				orb.run();

			}
			catch (Exception e) {
				System.err.println("ERROR OCCUREDL :" + e);
				e.printStackTrace(System.out);
			}
			System.out.println("Greetings Server Exiting ....");
		}
	}
		

Developing the Client Side
-----------------------------------------------------

::

	import org.omg.CosNaming.*;  //Naming Service will be used by the GreetingsClient
	import org.omg.CosNaming.NamingContextPackage.*;
	import org.omg.CORBA.*;		// This classes are needed by all the CORBA applications
	import GreetingsApp.*;

	public class GreetingsClient {
		static Greetings greetingsImpl;
		public static void main(String[] args) {
			try{
				// Creating and initializing the ORB object to perform marshaling and IIOP work
				ORB orb = ORB.init(args, null);
			
				// Getting the root object's naming context with the Name Service
				org.omg.CORBA.Object objectreference = orb.resolve_initial_references("NameService");

				// Since this is part of the Inter-operable Naming Service, using the NamingContextExt instead of NamingContext
				NamingContextExt namingcontextreference = NamingContextExtHelper.narrow(objectreference);

				// Object Reference resolution in Naming
				String name = "Greetings";
				greetingsImpl = GreetingsHelper.narrow(namingcontextreference.resolve_str(name));

				System.out.println("Acquired connection on the server object: " + greetingsImpl);
				System.out.println(greetingsImpl.expressGreetings());
				greetingsImpl.shutdown();
			}
			// Handling the CORBA system exceptions at runtime during any of the processes like
			// marshaling, un-marshaling and upcall
			catch (Exception e) {
				System.out.println("ERROR : " + e);
				e.printStackTrace(System.out);
			}
		}
	}

